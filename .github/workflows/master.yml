name: CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  APP_NAME: ${{ github.event.repository.name }}
  PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
  PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: false

      - name: Linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  build:
    needs:
      - lint

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build
        shell: bash
        run: CGO_ENABLED=0 GOOS=linux go build -o $APP_NAME .

      - name: Upload executable file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}
          path: ${{ env.APP_NAME }}
          if-no-files-found: error

  unit-test:
    needs:
      - build

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run tests
        run: go test -tags=unit -coverprofile=coverage.out -covermode=atomic ./...

      - name: Code analysis
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

      - name: Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

  #  contract-test:
  #    needs:
  #      - unit-test
  #
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - uses: actions/setup-go@v4
  #        with:
  #          go-version: "1.21"
  #
  #      - name: Install pact-go CLI
  #        run: |
  #          go install github.com/pact-foundation/pact-go/v2@2.x.x
  #          pact-go -l DEBUG install -d /tmp
  #
  #      - name: Run contract tests
  #        env:
  #          PACT_LOG_LEVEL: DEBUG
  #        run: make contract-test
  #
  #      - name: Publish contracts
  #        uses: pactflow/actions/publish-pact-files@v1.0.1
  #        env:
  #          pactfiles: pacts/*.json
  #          version: ${{ github.sha }}

  security-analysis:
    needs:
      - unit-test

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run security analysis with gosec
        uses: securego/gosec@master
        with:
          args: ./...

  #  can-i-deploy-to-dev:
  #    needs:
  #      - security-analysis
  #
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - run: docker pull pactfoundation/pact-cli:latest
  #
  #      - name: Can I Deploy?
  #        uses: pactflow/actions/can-i-deploy@v1.0.1
  #        env:
  #          application_name: API-Gateway
  #          version: ${{ github.sha }}
  #          to_environment: dev

  deploy-to-dev:
    environment: dev
    needs:
      - security-analysis

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}

      - run: |
          touch env.dev.json
          echo '{
            "IS_AT_REMOTE": true,
            "USER_API_URL": "${{ vars.USER_API_URL }}",
            "JWT_PRIVATE_KEY": "${{ secrets.JWT_PRIVATE_KEY }}",
            "JWT_PUBLIC_KEY": "${{ secrets.JWT_PUBLIC_KEY }}"
          }' > env.dev.json

      - uses: serverless/github-action@v3.2
        with:
          args: deploy --stage dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #  record-deployment-for-dev-environment:
  #    needs:
  #      - deploy-to-dev
  #
  #    runs-on: ubuntu-latest
  #    steps:
  #      - run: docker pull pactfoundation/pact-cli:latest
  #
  #      - uses: pactflow/actions/record-deployment@v1.0.1
  #        env:
  #          application_name: API-Gateway
  #          version: ${{ github.sha }}
  #          environment: dev

  #  can-i-deploy-to-prod:
  #    needs:
  #      - record-deployment-for-dev-environment
  #
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - run: docker pull pactfoundation/pact-cli:latest
  #
  #      - name: Can I Deploy To Production?
  #        uses: pactflow/actions/can-i-deploy@v1.0.1
  #        env:
  #          application_name: API-Gateway
  #          version: ${{ github.sha }}
  #          to_environment: production

  deploy-to-prod:
    environment: production
    needs:
      - deploy-to-dev

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}

      - run: |
          touch env.production.json
          echo '{
            "IS_AT_REMOTE": true,
            "USER_API_URL": "${{ vars.USER_API_URL }}",
            "JWT_PRIVATE_KEY": "${{ secrets.JWT_PRIVATE_KEY }}",
            "JWT_PUBLIC_KEY": "${{ secrets.JWT_PUBLIC_KEY }}"
          }' > env.production.json

      - uses: serverless/github-action@v3.2
        with:
          args: deploy --stage production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#  record-deployment-for-prod-environment:
#    environment: production
#    needs:
#      - deploy-to-prod
#
#    runs-on: ubuntu-latest
#    steps:
#      - run: docker pull pactfoundation/pact-cli:latest
#
#      - uses: pactflow/actions/record-deployment@v1.0.1
#        env:
#          application_name: API-Gateway
#          version: ${{ github.sha }}
#          environment: production
