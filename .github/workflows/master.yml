name: CI/CD

on:
  push:
    branches:
      - master

env:
  APP_NAME: ${{ github.event.repository.name }}
  PACT_CLI: docker run --rm -v ${PWD}:${PWD} -e ${{ secrets.PACT_BROKER_BASE_URL }} -e ${{ secrets.PACT_BROKER_TOKEN }} pactfoundation/pact-cli

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/go-cache

      - name: Linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  build:
    needs:
      - lint

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/go-cache

      - name: Build
        shell: bash
        run: go build -o $APP_NAME .

      - name: Upload executable file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}
          path: ${{ env.APP_NAME }}
          if-no-files-found: error

  unit-test:
    needs:
      - build

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/go-cache

      - name: Run tests
        run: go test -tags=unit -coverprofile=coverage.out -covermode=atomic ./...

      - name: Code analysis
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

      - name: Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

  contract-test:
    needs:
      - unit-test

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/go-cache

      - name: Run contract tests
        run: make contract-test

      - name: Publish contracts
        run: |
          ${{ env.PACT_CLI }} publish pacts --verbose \
            --broker-base-url="${{ secrets.PACT_BROKER_BASE_URL }}" \
            --broker-token="${{ secrets.PACT_BROKER_TOKEN }}" \
            --consumer-app-version="${{ github.sha }}"

  security-analysis:
    needs:
      - contract-test

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run security analysis with gosec
        uses: securego/gosec@master
        with:
          args: ./...

  can-i-deploy-to-dev:
    needs:
      - security-analysis

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: docker pull pactfoundation/pact-cli:latest

      - name: Can I Deploy?
        run: |
          ${{ env.PACT_CLI }} broker can-i-deploy --verbose \
            --pacticipant APIGateway \
            --version ${{ github.sha }} \
            --to-environment dev \
            --retry-while-unknown 30 \
            --retry-interval 10

  deploy-to-dev:
    environment: dev
    needs:
      - can-i-deploy-to-dev

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}

      - run: |
          touch env.dev.json
          echo '{
            "IS_AT_REMOTE": true,
            "USER_API_URL": "${{ vars.USER_API_URL }}",
            "JWT_PRIVATE_KEY": "${{ secret.JWT_PRIVATE_KEY }}",
            "JWT_PUBLIC_KEY": "${{ secret.JWT_PUBLIC_KEY }}"
          }' > env.dev.json

      - uses: serverless/github-action@v3.2
        with:
          args: deploy --stage dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  can-i-deploy-to-prod:
    needs:
      - deploy-to-dev

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: docker pull pactfoundation/pact-cli:latest

      - name: Can I Deploy To Production?
        run: |
          ${{ env.PACT_CLI }} broker can-i-deploy --verbose \
            --pacticipant APIGateway \
            --version ${{ github.sha }} \
            --to-environment production \
            --retry-while-unknown 30 \
            --retry-interval 10

  deploy-to-prod:
    environment: production
    needs:
      - can-i-deploy-prod

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}

      - run: |
          touch env.dev.json
          echo '{
            "IS_AT_REMOTE": true,
            "USER_API_URL": "${{ vars.USER_API_URL }}",
            "JWT_PRIVATE_KEY": "${{ secret.JWT_PRIVATE_KEY }}",
            "JWT_PUBLIC_KEY": "${{ secret.JWT_PUBLIC_KEY }}"
          }' > env.dev.json

      - uses: serverless/github-action@v3.2
        with:
          args: deploy --stage production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
